-- FUNCTION: public.getMapRandomSoureAndDestination()

-- DROP FUNCTION public."getMapRandomSoureAndDestination"();

CREATE OR REPLACE FUNCTION public."getMapRandomSoureAndDestination"(
	)
    RETURNS text
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$declare
	license_no varchar(30);
	alphabets varchar(26) = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
BEGIN
	return (array['{13.082680,80.270721},{12.971599,77.594566}',
			'{12.971599,77.594566},{11.016844,76.955833}',
			'{17.385044,78.486671},{18.678236,74.065305}',
			'{19.075983,72.877655},{23.022505,72.571365}',
			'{11.016844,76.955833},{13.082680,80.270721}',
			'{17.385044,78.486671},{17.738950,83.122503}',
			'{17.385044,78.486671},{12.971599,77.594566}',
			'{9.924496,78.213121},{13.082680,80.270721}',
			'{17.738950,83.122503},{13.082680,80.270721}',
			'{26.885448,75.650470},{23.022505,72.571365}',
			'{20.301150,85.680365},{22.676386,88.049528}',
			'{22.676386,88.049528},{25.593776,85.137452}',
			'{26.447413,80.198295},{25.593776,85.137452}',
			'{26.447413,80.198295},{26.885448,75.650470}',
			'{21.161348,78.932422},{23.022505,72.571365}',
			'{12.971599,77.594566},{13.082680,80.270721}',
			'{11.016844,76.955833},{12.971599,77.594566}',
			'{18.678236,74.065305},{17.385044,78.486671}',
			'{23.022505,72.571365},{19.075983,72.877655}',
			'{13.082680,80.270721},{11.016844,76.955833}',
			'{17.738950,83.122503},{17.385044,78.486671}',
			'{12.971599,77.594566},{17.385044,78.486671}',
			'{13.082680,80.270721},{9.924496,78.213121}',
			'{13.082680,80.270721},{17.738950,83.122503}',
			'{23.022505,72.571365},{26.885448,75.650470}',
			'{22.676386,88.049528},{20.301150,85.680365}',
			'{25.593776,85.137452},{22.676386,88.049528}',
			'{25.593776,85.137452},{26.447413,80.198295}',
			'{26.885448,75.650470},{26.447413,80.198295}',
			'{23.022505,72.571365},{21.161348,78.932422}'])
			[floor(random() * 30 + 1)];
END;
$BODY$;

ALTER FUNCTION public."getMapRandomSoureAndDestination"()
    OWNER TO postgres;

---------------------

-- FUNCTION: public.getrandom(integer, integer)

-- DROP FUNCTION public.getrandom(integer, integer);

CREATE OR REPLACE FUNCTION public.getrandom(
	upperlimit integer,
	lowerlimit integer)
    RETURNS integer
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$declare randomNum int;
BEGIN
 randomNum = ((random()*(upperLimit-lowerLimit))+lowerLimit)::int;
 return randomNum;
END;
$BODY$;

ALTER FUNCTION public.getrandom(integer, integer)
    OWNER TO postgres;


------------------------

-- FUNCTION: public.getrandomlicenseno()

-- DROP FUNCTION public.getrandomlicenseno();

CREATE OR REPLACE FUNCTION public.getrandomlicenseno(
	)
    RETURNS character varying
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$
declare
	license_no varchar(30);
	alphabets varchar(26) = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
BEGIN
	SELECT format('TN %s%s %s %s%s%s%s'
		 , a[1], a[2], substr(alphabets,(a[3]+1),1), a[4], a[5], a[6], a[7]) into license_no
	FROM  (
	   SELECT ARRAY (
		  SELECT trunc(random() * 10)::int
		  FROM   generate_series(1, 10)
		  ) AS a
	   ) sub;
	return license_no;
END;
$BODY$;

ALTER FUNCTION public.getrandomlicenseno()
    OWNER TO postgres;


----------------------------

-- FUNCTION: public.getrandomphonenumber()

-- DROP FUNCTION public.getrandomphonenumber();

CREATE OR REPLACE FUNCTION public.getrandomphonenumber(
	)
    RETURNS character varying
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$
declare
	contact_no varchar(30);
BEGIN
	SELECT format('(+91) 9%s%s%s%s%s%s%s%s%s'
		 , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]) into contact_no
	FROM  (
	   SELECT ARRAY (
		  SELECT trunc(random() * 10)::int
		  FROM   generate_series(1, 10)
		  ) AS a
	   ) sub;
	return contact_no;
END;
$BODY$;

ALTER FUNCTION public.getrandomphonenumber()
    OWNER TO postgres;


--------------------

-- FUNCTION: public.getrandomwithnumeric(numeric, numeric)

-- DROP FUNCTION public.getrandomwithnumeric(numeric, numeric);

CREATE OR REPLACE FUNCTION public.getrandomwithnumeric(
	"upperLimit" numeric,
	"lowerLimit" numeric)
    RETURNS double precision
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$declare randomNum double precision;
BEGIN
 randomNum = round(((random()::double precision*("upperLimit"-"lowerLimit"))+"lowerLimit")::numeric, 1)::double precision;
 return randomNum;
END;$BODY$;

ALTER FUNCTION public.getrandomwithnumeric(numeric, numeric)
    OWNER TO postgres;


------------------------

-- FUNCTION: public.gettankcapacity(integer, integer)

-- DROP FUNCTION public.gettankcapacity(integer, integer);

CREATE OR REPLACE FUNCTION public.gettankcapacity(
	"upperLimit" integer,
	"lowerLimit" integer)
    RETURNS integer
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$declare
	tankCapacity int;
BEGIN
	tankCapacity = (((getrandom("upperLimit", "lowerLimit") + 99) / 100 ) * 100)::int;
	return tankCapacity;
END;$BODY$;

ALTER FUNCTION public.gettankcapacity(integer, integer)
    OWNER TO postgres;


------------------------------

-- FUNCTION: public.populateDataTest(character varying, integer)

-- DROP FUNCTION public."populateDataTest"(character varying, integer);

CREATE OR REPLACE FUNCTION public."populateDataTest"(
	"intervalPeriod" character varying,
	"dataInterval" integer)
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$declare i int := 1;
j int := 0;
workHours int;
loadUnloadHours double precision = 0;
distanceTravelled double precision = 0;
startDate timestamp := DATE_TRUNC('second', CURRENT_TIMESTAMP::timestamp) - "intervalPeriod"::interval;
numOfDays int = (
	EXTRACT(
		epoch
		FROM "intervalPeriod"::interval
	) / (24 * 60 * 60)
);
dayCount int = 0;
driverCount int := count(1) from public."DCS_DriverVehicle";
drivingHours double precision;
restingHours double precision;
vehicleRunningHour double precision;
vehicleStartTime timestamp;
vehicleEndTime timestamp;
restingStartTime timestamp;
restingEndTime timestamp;
vehicleAndResting double precision = 0;
driverServiceId int = 1;
noOfDriving int;
noOfResting int;
drivingInsertTime double precision;
restingInsertTime double precision;
isDriving boolean;
noOfBreak int = 0;
vehicleSpeed int := getRandom(120, 20);
currentVehicleSpeed int := getRandom(120, 20);
harshBreakCount int = 0;
harshTurnCount int = 0;
harshBreakApplied int = 0;
harshTurnApplied int = 0;
harshBreakInterval int;
harshTurnInteral int;
driverStartTime int;
vehicleRealTimeInfoId int = 1;
fuelInfoId int = 1;
tankCapacity double precision;
currentVolume double precision = 0;
refuelVolume double precision = 0;
ignitionStatus int = 0;
theftDay int = 0;
leakageDay int = 0;
canRefuel double precision = 0;
loadVolume int = 0;
sourceLat double precision = 0;
sourceLong double precision = 0;
destLat double precision = 0;
destLong double precision = 0;
differenceofSource double precision = 0;
differenceofDestination double precision = 0;
latLong text[];
latLongSplit int = 0;
locationId int = 1;

/*Code */
BEGIN
    WHILE i <= driverCount LOOP
            SELECT "TankCapacity" INTO tankCapacity from public."DCS_VehicleMaster" 
			where "VehicleId" = (SELECT "VehicleId" from public."DCS_DriverVehicle" where "DriverVehicleId" = i);
            currentVolume = tankCapacity;
            startDate = DATE_TRUNC('day', now()::timestamp) + ('1 day'::interval) - "intervalPeriod"::interval;
            /*Implemented only for month*/
            IF numOfDays >= 30 
                THEN theftDay = getRandom(1, 15);
                    leakageDay = getRandom(16, 29);
            END IF;
			
            /*Driver Service*/
            WHILE dayCount < numOfDays LOOP 
                driverStartTime = getRandom(9, 7);
                startDate = startDate + concat(driverStartTime, ' hour')::interval + concat(dayCount, ' day')::interval;
                workHours = getRandom(10, 7);
                drivingHours = getRandom(8, 6);
                restingHours = getrandomwithnumeric(2, 1);
                noOfDriving = getRandom(3, 2);
                drivingInsertTime = round(drivingHours::numeric / noOfDriving, 2);
                restingInsertTime = round(restingHours::numeric / noOfDriving, 2);
				
				select regexp_split_to_array("getMapRandomSoureAndDestination"(), ',') into latLong;
				select regexp_replace(latLong[1], '[{},]+', '', 'g')::double precision into sourceLat;
				select regexp_replace(latLong[2], '[{},]+', '', 'g')::double precision into sourceLong;				   
				select regexp_replace(latLong[3], '[{},]+', '', 'g')::double precision into destLat;				 
				select regexp_replace(latLong[4], '[{},]+', '', 'g')::double precision into destLong;
				
					
                WHILE noOfBreak < noOfDriving LOOP
                        IF (noOfBreak != noOfDriving - 1) THEN
                            vehicleStartTime = startDate;
                            vehicleEndTime = startDate + concat(drivingInsertTime, ' Hour')::interval;

                            /*vehicle info*/
                            /*yet to do for Day basis*/
                            vehicleRunningHour = DATE_PART('epoch', vehicleEndTime - vehicleStartTime) / 3600;
                            ignitionStatus = 1;
							
							latLongSplit = (((vehicleRunningHour * 60)/"dataInterval") - 2);

							IF sourceLat > destLat THEN																					
								differenceofSource = TRUNC(((sourceLat - destLat) / latLongSplit)::numeric,6);
                            END IF;											
							IF sourceLat < destLat THEN 	
								differenceofSource = TRUNC(((destLat - sourceLat) / latLongSplit)::numeric,6);
                            END IF;
							IF sourceLong > destLong THEN
								differenceofDestination = TRUNC(((sourceLong - destLong) / latLongSplit)::numeric,6);
                            END IF;
							IF sourceLong < destLong THEN
								differenceofDestination = TRUNC(((destLong - sourceLong) / latLongSplit)::numeric,6);	
                            END IF;
													
                            WHILE j <= (vehicleRunningHour * 60) LOOP 
                                    currentVehicleSpeed = getRandom(120, 20);
                                    IF (vehicleSpeed - currentVehicleSpeed) > 50 THEN harshBreakApplied = 1::bit;
                                    END IF;
                                    IF (vehicleSpeed - currentVehicleSpeed) > 30 THEN harshTurnApplied = 1::bit;
                                    END IF;
                                    
                                    CASE
                                    WHEN currentVehicleSpeed >= 60 AND currentVehicleSpeed <= 80 THEN currentVolume = currentVolume - getrandomwithnumeric(0.5, 1);
                                    WHEN currentVehicleSpeed > 80 AND currentVehicleSpeed <= 100 THEN currentVolume = currentVolume - getrandomwithnumeric(1, 1.5);
                                    WHEN currentVehicleSpeed > 100 AND currentVehicleSpeed <= 120 THEN currentVolume = currentVolume - getrandomwithnumeric(1.5, 2);
                                    ELSE currentVolume = currentVolume - getrandomwithnumeric(0.1, 0.9);
                                    END case;
                                    
                                    /*Leakage*/
                                    IF dayCount = leakageDay AND (j = 110 OR j = 120)
                                        THEN currentVolume = currentVolume - getrandomwithnumeric(5, 7); 
										raise notice 'leakageDay %', startDate;
                                    END IF;
									
									
									/*Location Updation*/
									IF j > 0 THEN
										IF sourceLat = destLat AND sourceLong = destLong THEN
											raise notice 'Success j %',j;
                                        END IF;
										IF sourceLat > destLat THEN
											sourceLat = sourceLat - differenceofSource;		
                                        END IF;									
										IF sourceLat < destLat THEN
											sourceLat = sourceLat + differenceofSource;
                                        END IF;
										IF sourceLong > destLong THEN
										sourceLong = sourceLong - differenceofDestination;
										END IF;
                                        IF sourceLong < destLong THEN
                                            sourceLong = sourceLong + differenceofDestination;
                                        END IF;								
									END IF;
									--sourceLat = TRUNC(sourceLat::numeric, 6);
									--sourceLong = TRUNC(sourceLong::numeric, 6);								
                                    INSERT INTO public."DCS_VehicleRealTimeInfo" (
                                            "VehicleRealTimeInfoId",
                                            "DriverVehicleId",
                                            "PacketTime",
                                            "VehicleSpeed",
                                            "HarshTurning",
                                            "HarshBreaking",
                                            "IgnitionStatus",
                                            "LoadVolume",
                                            "CreatedDate",
                                            "ModifiedDate"
                                        )
                                    SELECT vehicleRealTimeInfoId,
                                        i,
                                        startDate,
                                        currentVehicleSpeed,
                                        harshBreakApplied,
                                        harshTurnApplied,
                                        ignitionStatus:: bit,
                                        0,
                                        now()::timestamp,
                                        null;
										
									INSERT INTO public."DCS_Location" (
                                            "LocationId",
                                            "VehicleRealTimeInfoId",
                                            "Latitude",
                                            "Longitude"
                                        )
                                    SELECT locationId,
                                        VehicleRealTimeInfoId,
                                        TRUNC(sourceLat::numeric, 6),
                                        TRUNC(sourceLong::numeric, 6);
										
                                    INSERT INTO public."DCS_FuelInfo" (
                                            "DriverVehicleId",
                                            "FuelInfoId",
                                            "CurrentVolume",
                                            "RefuelVolume",
                                            "PacketTime"
                                        )
                                    SELECT i,
                                        fuelInfoId,
                                        currentVolume,
                                        0,
                                        startDate;
                                    j := j + "dataInterval";
                                    vehicleSpeed = currentVehicleSpeed;
                                    distanceTravelled = round(((distanceTravelled + (currentVehicleSpeed * "dataInterval")) / 60)::numeric, 2);
                                    startDate := startDate + concat("dataInterval", ' minutes')::interval;
                                    harshBreakCount := harshBreakCount + "dataInterval";
                                    harshTurnCount := harshTurnCount + "dataInterval";
                                    vehicleRealTimeInfoId = vehicleRealTimeInfoId + 1;
                                    fuelInfoId = fuelInfoId + 1;
									locationId = locationId + 1;
                                    harshBreakApplied = 0;
                                    harshTurnApplied = 0;
                            END LOOP;
                            j := 0;
							
                            /*resting entry*/
                            restingStartTime = vehicleEndTime + interval '1 second';
                            restingEndTime = restingStartTime + concat(restingInsertTime, ' Hour')::interval;
                            restingHours = DATE_PART('epoch', restingEndTime - restingStartTime) / 3600;
                            WHILE j <= ((DATE_PART('epoch', restingEndTime - restingStartTime) / 3600) * 60) LOOP
                                    ignitionStatus = 0;

                                    /*Theft*/
                                    IF dayCount = theftDay AND (j = 10) AND currentVolume > 50 THEN
									raise notice 'theftDay % currentVolume %', startDate, currentVolume;
										IF currentVolume > 50 AND currentVolume <= 70
											THEN currentVolume = currentVolume - getrandomwithnumeric(40, 50);raise notice 'Theft Occured %', startDate;
										END IF;
										IF currentVolume > 70 AND currentVolume <= 100
											THEN currentVolume = currentVolume - getrandomwithnumeric(50, 70);raise notice 'Theft Occured %', startDate;
										END IF;
										IF currentVolume > 100
											THEN currentVolume = currentVolume - getrandomwithnumeric(75, 80);raise notice 'Theft Occured %', startDate;
                                        END IF;
                                    END IF;

                                    INSERT INTO public."DCS_VehicleRealTimeInfo" (
                                            "VehicleRealTimeInfoId",
                                            "DriverVehicleId",
                                            "PacketTime",
                                            "VehicleSpeed",
                                            "HarshTurning",
                                            "HarshBreaking",
                                            "IgnitionStatus",
                                            "LoadVolume",
                                            "CreatedDate",
                                            "ModifiedDate"
                                        )
                                    SELECT vehicleRealTimeInfoId,
                                        i,
                                        startDate,
                                        0,
                                        0,
                                        0,
                                        ignitionStatus::bit,
                                        0,
                                        now()::timestamp,
                                        null;
										
									INSERT INTO public."DCS_Location" (
                                            "LocationId",
                                            "VehicleRealTimeInfoId",
                                            "Latitude",
                                            "Longitude"
                                        )
                                    SELECT locationId,
                                        VehicleRealTimeInfoId,
                                        sourceLat,
                                        sourceLong;
									
                                    INSERT INTO public."DCS_FuelInfo" (
                                            "DriverVehicleId",
                                            "FuelInfoId",
                                            "CurrentVolume",
                                            "RefuelVolume",
                                            "PacketTime"
                                        )
                                    SELECT i,
                                        fuelInfoId,
                                        currentVolume,
                                        0,
                                        startDate;
                                    j := j + "dataInterval";
                                    startDate := startDate + concat("dataInterval", ' minutes')::interval;
                                    fuelInfoId = fuelInfoId + 1;
									locationId = locationId + 1;
                                    vehicleRealTimeInfoId = vehicleRealTimeInfoId + 1;
                            END LOOP;
                            j := 0;
							
                        END IF;

                        IF (noOfBreak = noOfDriving - 1)
                            THEN loadUnloadHours = workHours - vehicleAndResting;
                                restingStartTime = null;restingEndTime = null;
                                restingHours = 0;
                                vehicleStartTime = null;vehicleEndTime = null;
                                vehicleRunningHour = 0;
                                /*Load Unload, refuel*/
                                WHILE j <= (loadUnloadHours * 60) LOOP
                                        IF currentVolume <= 100 THEN refuelVolume = tankCapacity - currentVolume;currentVolume = currentVolume + refuelVolume;
                                        END IF;
                                        loadVolume = (loadUnloadHours * 60) - j;
                                        ignitionStatus = 0;	
                                        INSERT INTO public."DCS_VehicleRealTimeInfo" (
                                                "VehicleRealTimeInfoId",
                                                "DriverVehicleId",
                                                "PacketTime",
                                                "VehicleSpeed",
                                                "HarshTurning",
                                                "HarshBreaking",
                                                "IgnitionStatus",
                                                "LoadVolume",
                                                "CreatedDate",
                                                "ModifiedDate"
                                            )
                                        SELECT vehicleRealTimeInfoId,
                                            i,
                                            startDate,
                                            0,
                                            0,
                                            0,
                                            ignitionStatus:: bit,
                                            loadVolume,
                                            now()::timestamp,
                                            null;
										
										INSERT INTO public."DCS_Location" (
                                            "LocationId",
                                            "VehicleRealTimeInfoId",
                                            "Latitude",
                                            "Longitude"
                                        )
										SELECT locationId,
											VehicleRealTimeInfoId,
											sourceLat,
											sourceLong;
										
                                        INSERT INTO public."DCS_FuelInfo" (
                                                "DriverVehicleId",
                                                "FuelInfoId",
                                                "CurrentVolume",
                                                "RefuelVolume",
                                                "PacketTime"
                                            )
                                        SELECT i,
                                            fuelInfoId,
                                            currentVolume,
                                            refuelVolume,
                                            startDate;
                                        j := j + "dataInterval";
                                        distanceTravelled = 0;
                                        startDate := startDate + concat("dataInterval", ' minutes')::interval;
                                        vehicleRealTimeInfoId = vehicleRealTimeInfoId + 1;
                                        fuelInfoId = fuelInfoId + 1;
										locationId = locationId + 1;
                                        refuelVolume = 0;
                                END LOOP;
                                j := 0;
                        END IF;

                        -- IF restingStartTime != NULL AND restingEndTime != NULL THEN restingHours = DATE_PART('epoch', restingEndTime - restingStartTime) / 3600;
                        -- END IF;
                            
                        INSERT INTO public."DCS_DriverService" (
                                "DriverServiceId",
                                "DriverVehicleId",
                                "VehicleStartTime",
                                "VehicleEndTime",
                                "RestingStartTime",
                                "RestingEndTime",
                                "RestTimeHours",
                                "DrivingTimeHours",
                                "WorkTimeHours",
                                "DistanceTravelled",
                                "CreatedDate",
                                "ModifiedDate"
                            )
                        SELECT driverServiceId,
                            i,
                            vehicleStartTime,
                            vehicleEndTime,
                            restingStartTime,   
                            restingEndTime,
                            restingHours,
                            vehicleRunningHour,
                            loadUnloadHours,
                            distanceTravelled,
                            startDate,
                            null;

                        vehicleAndResting = vehicleAndResting + vehicleRunningHour + restingHours;
                        startDate = startDate + interval '1 second';
                        driverServiceId = driverServiceId + 1;
                        noOfBreak = noOfBreak + 1;
                END LOOP;
                ignitionStatus = 0;
                distanceTravelled = 0;
                loadUnloadHours = 0;
                vehicleAndResting = 0;
                noOfBreak := 0;
				dayCount = dayCount + 1;
				startDate = DATE_TRUNC('day', now()::timestamp) + ('1 day'::interval) - "intervalPeriod"::interval;
            END LOOP;
            i := i + 1;
            dayCount = 0;
    END LOOP;
END;$BODY$;

ALTER FUNCTION public."populateDataTest"(character varying, integer)
    OWNER TO postgres;


-----------------------

-- FUNCTION: public.populatedrivers(integer)

-- DROP FUNCTION public.populatedrivers(integer);

CREATE OR REPLACE FUNCTION public.populatedrivers(
	num integer)
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$
declare i int := 1;
BEGIN	   
	WHILE i <= num
		LOOP		  
		  INSERT INTO public."DCS_DriverMaster" ("DriverName", "DriverMobile", "CreatedDate", "ModifiedDate")
		  SELECT  concat('Driver_', i), getRandomPhoneNumber(), now()::timestamp, null;
		  i := i + 1;
		END LOOP;
END;
$BODY$;

ALTER FUNCTION public.populatedrivers(integer)
    OWNER TO postgres;


-------------------------

-- FUNCTION: public.populatedrivervehicle(integer)

-- DROP FUNCTION public.populatedrivervehicle(integer);

CREATE OR REPLACE FUNCTION public.populatedrivervehicle(
	num integer)
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$
declare i int := 1;
BEGIN	   
	WHILE i <= num
		LOOP		  
		  INSERT INTO public."DCS_DriverVehicle" ("DriverVehicleId", "VehicleId", "DriverId", "CreatedDate", "ModifiedDate")
		  SELECT  i, i, i, now()::timestamp, null;
		  i := i + 1;
		END LOOP;
END;
$BODY$;

ALTER FUNCTION public.populatedrivervehicle(integer)
    OWNER TO postgres;


---------------------------

-- FUNCTION: public.populatevehicles(integer)

-- DROP FUNCTION public.populatevehicles(integer);

CREATE OR REPLACE FUNCTION public.populatevehicles(
	num integer)
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$declare i int := 1;
BEGIN	   
	WHILE i <= num
		LOOP		  
		  INSERT INTO public."DCS_VehicleMaster" ("VehicleId","VehicleLicenseNo", "VehicleName", "CreatedDate", "ModifiedDate", "TankCapacity")
		  SELECT  i, concat('Vehicle_', i), getRandomLicenseNo(), now()::timestamp, null, getTankCapacity(200,500);
		  i := i + 1;
		END LOOP;
END;
$BODY$;

ALTER FUNCTION public.populatevehicles(integer)
    OWNER TO postgres;


---------------------------